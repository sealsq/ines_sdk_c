/*=======================================
SEAL SQ 2024
INeS SDK
IoT / Tools / Provisioning / Firmware Team
=======================================

SPDX-License-Identifier: Apache-2.0*/

/*! \file wisekey_Ines_API.h
    \brief APIs to communicate with INeS
*/
#ifndef INES_AGENT_H_
#define INES_AGENT_H_
#include <stdbool.h>

#include "wisekey_Tools.h"

#ifdef __cplusplus
extern "C"
{
#endif

    enum RENEW_MODE
    {
        NONE = 0,
        RENEW = 1,
        REKEY = 2,
    };

    /** @brief This is the complete process to communicate by REST API to INeS, this will send a Access Token Request and after send the request authenticated
     *  @param config Config File to choose
     *  @param method
     *  @param apiname
     *  @param custom_suffix
     *  @param body
     *  @return response from INeS
     */
    char* apiREST_process(config_values_t config, char* method, char* apiname, char* custom_suffix,char* body);

    /** @brief This will send a EST request to INeS
     *  @param config Config File to choose
     *  @param clientCert Path to client Certificate to use, can be NULL if you use VAULT_IC Certificate
     *  @param clientKey Path to client Key to use, can be NULL if you use VAULT_IC Key
     *  @param method
     *  @param apiname
     *  @param custom_suffix
     *  @param body
     *  @return response from INeS
     */
    char* apiEST_process(config_values_t config,char* clientCert,char*clientKey,char* method, char* apiname, char* custom_suffix,char* body);

    /** @brief Request INeS to get the list of CA available
     *
     *  @param config Config struct object
     *  @param CA_List CA_details_t[x] array struct to store results
     *  @param CA_listSize x bytes size allocated in CA_List CA_details_t[x]
     *  @return Number of CA returned
     */
    int apiREST_getCAList(config_values_t config,CA_details_t*CA_List, int CA_listSize);

    /** @brief Request INeS to get the CA details with the provided ID
     *
     *  @param config Config struct object
     *  @param CA_id Id of CA you wnat details
     *  @return CA_details_t structure filled on success, filled of "NULL" in case of failure
     */
    CA_details_t apiREST_getCAdetails(config_values_t config, int CA_id);

    /** @brief Request INeS to get the CA chain with the provided ID
     *
     *  @param config Config struct object
     *  @param CA_id Id of CA you wnat details
     *  @return CA_certificat_chain_t structure filled on success, filled of "NULL" in case of failure
     */
    CA_certificat_chain_t apiREST_getCACertificateChain(config_values_t config, int CA_id);

    /** @brief Request INeS to get the CA details with the provided ID
     *
     *  @param config Config struct object
     *  @param templateId Template provided by your Wisekey FAE
     *  @param subjects Subjects generated by generateSubjects(...)
     *  @param CSR String
     *  @return Certificate_t structure filled on success, filled of "NULL" in case of failure
     */
    certificate_t apiREST_issueCertificate(config_values_t config, char *templateId, char *subjects, char *CSR);

    /** @brief Request INeS a list of certificate at the current pageNum
     *
     *  @param config Config struct object
     *  @param certificate_List Certificate_t[x] array struct to store results
     *  @param serialNumber SerialNumber of the certificate you want
     *  @param certificate_ListSize Size allocated in certificate_List
     *  @return Number of certificate returned
     */
    int apiREST_getCertificatebySN(config_values_t config, certificate_t *certificate_List, char *serialNumber, int certificate_ListSize);
    
    /** @brief Request INeS a list of certificate at the current pageNum
     *
     *  @param config Config struct object
     *  @param certificate_List Certificate_t[x] array struct to store results
     *  @param commonName If You want to filter the list by commonName
     *  @param certificate_ListSize Size allocated in certificate_List
     *  @param pageNum Choose the PageNumber of INeS
     *  @return Number of certificate returned
     */
    int apiREST_getCertificateList(config_values_t config, certificate_t *certificate_List, char *commonName, int certificate_ListSize, int pageNum);

    /** @brief Request INeS to get the CA details with the provided ID
     *
     *  @param config Config struct object
     *  @param certificate_id Id of the certificate you want to renew
     *  @param revokeOriginal Det a TRUE if you want to revoke the original certificate (with the id provided before)
     *  @param CSR String
     *  @return Certificate_t structure filled on success, filled of "NULL" in case of failure
     */
    certificate_t apiREST_renewRekeyCertificate(config_values_t config, int certificate_id, int revokeOriginal, char *CSR);

    /** @brief Request INeS to validate a certificate 
     *
     *  @param config Config struct object
     *  @param certificate Certificate you want to validate, must be a certificate generated by INeS
     *  @return Certificate_status_t structure filled on success, filled of "NULL" in case of failure
     */
    certificate_status_t apiREST_validateCertificate(config_values_t config, char *certificate);

    /** @brief Request INeS revokation informations of the certificate 
     *
     *  @param config Config struct object
     *  @param certificate Certificate you want to get revokation informations, must be a certificate generated by INeS
     *  @return Certificate_status_t structure filled on success, filled of "NULL" in case of failure
     */
    certificate_status_t apiREST_getRevocationInformation(config_values_t config, char *certificate);

    /** @brief Request INeS details of certificate by Id or thumbprint (only fill one of this two parametters) 
     *
     *  @param config Config struct object
     *  @param thumbprint Fill it if you want to get informations by the thumbprint of the certificate
     *  @param certID Fill it if you want to get informations by id of the certificate
     *  @return Certificate_status_t structure filled on success, filled of "NULL" in case of failure
     */
    certificate_t apiREST_getCertificateDetails(config_values_t config, char *thumbprint, int certID);

    /**  @brief Enum to choose a revokation reason when asked to INeS*/
    enum REVOCATION_REASONS
    {
        REVOKE_UNSPECIFIED = 0,
        REVOKE_KEY_COMPROMISE = 1,
        REVOKE_CA_COMPROMISE = 2,
        REVOKE_AFFILIATION_CHANGED = 3,
        REVOKE_SUPERSEDED = 4,
        REVOKE_CESSATION_OF_OPERATION = 5,
        REVOKE_CERTIFICATE_HOLD = 6,
        REVOKE_REMOVE_FROM_CRL = 7,
        REVOKE_PRIVILEGE_WITHDRAW = 8,
        REVOKE_AA_COMPROMISE = 9,
    };

    /** @brief Request INeS to revoke the given certificate
     *
     *  @param config Config struct object
     *  @param certId Id of the certificate you want to revoke
     *  @param revokationReason Choose one of REVOCATION_REASONS enum
     *  @param revocationComment Fill if you want to add a comment on the revokation
     *  @return 0 if success, -1 in case of faillure
     */
    int apiREST_revokeCertificate(config_values_t config, int certId, int revokationReason, char *revocationComment);

    /** @brief Request INeS a list of certificate Template
     *
     *  @param config Config struct object
     *  @param certificateTemplate_List Certificate_t[x] array struct to store results
     *  @param certificateTemplate_ListSize Size allocated in certificate_List
     *  @return Number of certificate returned
     */
    int apiREST_getCertificateTemplateList(config_values_t config,certificate_template_t* certificateTemplate_List, int certificateTemplate_ListSize);

    /** @brief enum of possible API EST*/
    enum API_EST
    {
        GET_CA_CERTIFICATE = 0,
        GET_CA_CERTIFICATE_ARBITRARY_LABEL = 1,
        ENROLL_CERTIFICATE = 2,
        ENROLL_CERTIFICATE_ARBITRARY_LABEL = 3,
        RE_ENROLL_CERTIFICATE = 4,
        RE_ENROLL_CERTIFICATE_ARBITRARY_LABEL = 5,
        ENROLL_CERTIFICATE_SERVER_KEY_GEN = 6,
        ENROLL_CERTIFICATE_SERVER_KEY_GEN_ARBITRARY_LABEL = 7,
    };

    /** @brief Build and and send the choosen EST request to INeS
     *
     *  @param config Config struct object
     *  @param clientCert Path to client Certificate to use, can be NULL if you use VAULT_IC Certificate
     *  @param clientKey Path to client Key to use, can be NULL if you use VAULT_IC Key
     *  @param mode Choose one of API_EST enum
     *  @param body If body needed, see INeS documentation
     *  @param arbitraryLabel See INeS documentation
     *  @return Response from INeS, NULL if no response
     */
    char *apiEST(config_values_t config,char* clientCert,char*clientKey,int mode, char *body, bool arbitraryLabel);

#ifdef __cplusplus
}
#endif

#endif // INES_AGENT_H_
